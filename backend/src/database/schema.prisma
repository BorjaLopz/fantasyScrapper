// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GenderEnum {
  MALE
  FEMALE
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String    @id
  email     String    @unique
  password  String
  profile   Profile?
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  firstName String
  lastName  String?
  birthDate DateTime?
  website   String?
  avatarUrl String?
  gender    GenderEnum @default(MALE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Team {
  id            Int     @id @default(autoincrement())
  fantasyTeamId String  @unique
  name          String
  shortName     String
  slug          String
  dspId         Int
  store         String?
  badgeColor    String
  badgeGray     String
  badgeWhite    String

  players Player[]
}

model Player {
  id               Int     @id @default(autoincrement())
  fantasyPlayerId  String  @unique
  name             String  @unique
  nickname         String
  image            String?
  points           Decimal
  weekPoints       Decimal
  averagePoints    Decimal
  lastSeasonPoints Decimal
  slug             String
  positionId       Int
  position         String
  marketValue      Decimal
  playerStatus     String

  teamId      Int
  team        Team   @relation(fields: [teamId], references: [id])
  playerStats Stat[]
}

model Stat {
  id                 Int     @id @default(autoincrement())
  stats              Json
  weekNumber         Int
  totalPoints        Int
  isInIdealFormation Boolean @default(false)

  Player   Player? @relation(fields: [playerId], references: [id])
  playerId Int?
}
